저번 시간에 String까지 공부
기본 타입 8가지 이외에
String은 표준 api에서 제공해주는 타입이다.

----------- 전날 관련 내용 복습
cf)
정수형 타입은 이진수 방식으로 값이 저장
실수형 타입은 가수,지수 방식으로 값이 저장
--> int(4byte) 타입보다 float(4byte) 타입이 훨씬 더 큰 값을 표현 가능하다.
-----------

# 자동 형변환 부터 시작
자동 타입 변환.
큰 허용 범위 타입 = 작은 허용 범위 타입 --> 성립

ex)
byte byteValue = 10;
int intValue = byteValue;  // 자동 타입 변환이 일어남
*(이 후 byteValue의 타입이 int형이 된다는 것이 아니라, int 타입 intValue가 byteValue의 값을 int형식으로 값을 대입받는다는 의미이다.)

ex)
int intValue = 50;
long longValue = intValue;  // 자동 타입 변환이 일어남
(정수형 타입 int는 4바이트, long은 8바이트이다. long 타입으로 선언된 변수 longValue는 int 타입 변수 intValue보다 더 큰 정수형 타입이기 때문에 값을 대입받을 때 long intValue로 인식한다는 것. 이것을 자동 타입 변환이 일어났다고 하는 것이다.)

정수 타입이 실수 타입으로 대입될 경우, 무조건 자동 타입 변환이 된다. (실수 타입은 정수 타입보다 허용 범위가 더 크기 때문)

=> 생각 정리
어떤 자료형 타입의 변수에 리터럴을 대입하는 것이 아닌, 다른 변수를 대입하려면
대입하려는 변수의 타입이, 대입되는 변수의 타입보다 메모리 크기가 작거나 같아야 온전한 값이 대입된다.

--------

ex)
long longValue = 5000000000L;
float floatValue = longValue;		// 5.0E9f 로 저장됨
double doubleValue = longValue;	// 5.0E9 로 저장됨

char 타입의 경우 int 타입으로 자동 변환되면 '유니코드' 값이 대입된다.

ex)
char charValue = '가';
int intValue = charValue;	// 44032가 저장됨 (UTF-8 한글코드 검색해서 확인해볼 수 있다)

나머지 ex) 가능하다.
int intValue = 50;
long longValue = intValue;
System.out.println(intValue);
		
long longValue = 100;
float floatValue = longValue;
System.out.println(floatValue);
		
float floatValue = 100.5f;
double doubleValue = floatValue;
System.out.println(doubleValue);


# 강제 타입 변환
큰 허용 범위 타입은 작은 허용 범위 타입으로 자동 타입 변환될 수 없기 때문에 강제 타입 변환(casting)을 해주어야 한다.
(큰 그릇을 작은 그릇 단위로 쪼개어 한 조각만 작은 그릇에 넣는 것은 가능하다)
=> 당연히 대입하려는 값이 현재 대입하려는 변수의 타입보다 메모리 크기가 큰 타입이라면 값이 온전히 들어가지 못하는 경우가 있다.

- 예제 풀어보며 이해하기
int var1 = 10;
byte var2 = (byte) var1;
System.out.println(var2);

var1 = 200;
var2 = (byte) var1;
System.out.println(var2);	// 값의 훼손이 일어남

long var3 = 300;
int var4 = (int) var3;
System.out.println(var4);

int var5 = 65;
char var6 = (char) var5;
System.out.println(var6);

double var7 = 3.14;
int var8 = (int) var7;
System.out.println(var8);	// 소수점 이하가 버려짐

# 연산식에서 자동 타입 변환
- 예제를 통해 이해하며 적응
byte result1 = 10 + 20;
System.out.println(result1);

byte v1 = 10;
byte v2 = 20;
int result2 = v1 + v2;
System.out.println(result2);

byte v3 = 10;
int v4 = 100;
long v5 = 1000L;
long result3 = v3 + v4 + v5;

char v6 = 'A';
char v7 = 1;
int result4 = v6 + v7;
System.out.println( (char) result4);

int v8 = 10;
int result5 = v8 / 4;
System.out.println(result5);

int v9 = 10;
double result6 = (double) v9 / 4;
System.out.println(result6);

int v10 = 10;
double result7 = v10 / 4.0;
System.out.println(result7);

int v11 = 10;
double result8 = (double) (v11 / 4);	// 2.0 출력, (v11/4)를 먼저 연산하기 때문!
System.out.println(result8);


# 문자열을 기본 타입으로 변환**
String -> int
ex) 
String str = "300000";
int value = Integer.parseInt(str);

String -> double
String str = "12.345";
double value = Double.parseDobule(str);

@ 반대의 경우
int v1 = 10;
String str1 = String.valueOf(v1);

--> result = "3" + 5; 이것의 출력을 8로 만들어보자.

예제학습
int value1 = Integer.parseInt("10");	// 문자열을 정수형으로 바꾸고 싶을 때
double value2 = Double.parseDouble("3.14");
Boolean value3 = Boolean.parseBoolean("true");

System.out.println(value1);
System.out.println(value2);
System.out.println(value3 + "\n");

String str1 = String.valueOf(10);
String str2 = String.valueOf(3.14);
String str3 = String.valueOf(true);

System.out.println(str1);
System.out.println(str2);
System.out.println(str3 + "\n");

String str4 = String.valueOf(value1);	// 다른 타입의 값을 문자열로 바꾸고 싶을 때
String str5 = String.valueOf(value2);
String str6 = String.valueOf(value3);

System.out.println(str4);
System.out.println(str5);
System.out.println(str6);


# 변수 사용 범위
중괄호  { } 블록 내에서 선언된 변수는.
해당 중괄호 { } 블록 내에서만 사용이 가능하고 밖에서는 사용할 수 없다. (java 언어는 이를 확실히 지킨다)

ex) 예제 학습
int v1 = 15;
if(v1>10) {
	int v2 = v1 - 10;	// v2는 if 블록내에서만 사용가능
}
int v3 = v1 + v2 + 5;

ex) 예제 수정한다면
int v1 = 15;
int v2 = 0;

if(v1>10) {
	v2 = v1 - 10;
}
int v3 = v1 + v2 + 5;


# 콘솔로 변수값 출력
java에서는 printf 거의 안쓴다..

# 키보드 입력 데이터를 변수에 저장 (코테 빠르게 준비시키기 위하여)
키보드로부터 입력된 데이터를 읽는 방법은 여러가지가 있다..
입력된 데이터를 읽고 변수에 저장하는 가장 쉬운 방법은 Scanner를 사용하는 것.
1) import java.util.Scanner; // Scanner가 java.util 패키지에 있다는 것을 컴파일러에게 알려주는 역할을 하는 코드.
2) Scanner 타입 변수를 선언
3) 대입 연산자(=)를 사용하여 new 연산자로 생성한 Scanner 객체를 변수에 대입.
ex) 
Scanner scanner = new Scanner(System.in);

- 예제로 학습


## 과제 : 2장 확인문제

----------------------------
3장 연산자

# 부호/증감 연산자
byte b = 100;
byte result = -b;	// 컴파일 에러
--> 정수 타입(byte, short, int) 연산의 결과는 int 타입이다.
부호를 변경하는 것도 연산이므로 int 타입 변수에 대입해야 한다.

예제 오늘의 과제

증감 연산자(++,--)는 변수의 값을 1 증가 또는 1감소시키는 연산자이다.

단독으로 사용할 경우 변수의 앞뒤 어디에든 붙어도 결과는 동일
ex) i++; , ++i; , i--; , --i;

*하지만 여러 개의 연산자가 포함되어 있는 연산식에선 결과가 달라진다.
- 변수 앞에 있으면 우선 변수를 1증가 또는 1감소시킨 후 다른 연산을 수행 ('=' 대입 연산자도 연산자인걸 확인!)
- 변수 뒤에 있으면 모든 연산을 끝낸 후 변수를 1증가 또는 1감소

* 예제로 확인하고 이해


# 산술 연산자
+, -, *, /, %

* 예제로 확인


# 정확한 계산은 정수 연산으로**
실수를 사용하여 연산할 때 '정확한 값'이 나오지 않는 경우가 발생하기 때문에 정수 연산으로 하는 것이 좋다.
예제 확인하고 복습하기


# 나눗셈 연산 후 NaN과 Infinity 처리**
--> 데이터 유효성 검사** (테스트 해야한다)
예제코드로 학습..
어떻게 보면 에러나는게 더 안전할 수 있다.


# 비교 연산자
예제로 확인


# 논리 연산자
AND(논리곱) &&
OR(논리합) ||
NOT(논리 부정) !

예제 코드로 확인


# 대입 연산자
+=, -=, *=, /= 이정도는 알아야 한다.

예제로 확인.

int result = 0;
result += 10;	// result = result + 10; 과 같다.
// 왼쪽 방법의 경우 연산자가 1개, 오른쪽 방법은 연산자 2개
// 연산의 속도를 향상시키려면 연산자의 갯수를 줄여야 하지만, 여기서 그렇게 크게 차이가 나지 않는다.
System.out.println("result = " + result);

result -= 5;
System.out.println("result = " + result);

result *= 3;
System.out.println("result = " + result);

result /= 5;
System.out.println("result = " + result);

result %= 3;
System.out.println("result = " + result);


# 삼항(조건) 연산자**
==> 피연산자 ? 피연산자 : 피연산자 방식으로 표현
? 앞의 피연산자는 boolean 변수 or 조건식 (따라서 조건 연산자라고도 함)
이 값이 true이면 콜론(:) 앞의 피연산자가 선택되고, false라면 콜론 뒤의 피연산자가 선택된다.

ex)
int score = 85;
char grade = (score > 90) ? 'A' : 'B';


# 연산의 방향과 우선순위 (이해해야함. 외우지 x)
내가 코드를 짤 때 우선적으로 연산할 것에 소괄호()를 사용하여 코딩하자.

----------------------------------
4장 조건문과 반복문

# 코드 실행 흐름 제어
절대 외우려고 하지말고 흐름을 이해하려 노력하자.
제어문 --> 조건문, 반복문


# if문
실행문이 하나라면 중괄호를 생략해도 되지만,
실행문이 하나라도 중괄호를 사용하여 코딩하자.

예제로 확인.
IfElseIfElseExample까지 학습.